{"version":3,"sources":["firebase.js","components/TaskList.js","components/AddTaskForm.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","categoryClassNames","ux","dev frontend","dev backend","design","testing","buttonClassNames","TaskList","_ref","tasks","setTasks","loading","assignee","setAssignee","useState","error","setError","removeTask","async","window","confirm","taskDoc","doc","id","deleteDoc","prevTasks","filter","task","message","renderTasks","status","map","React","createElement","key","className","concat","category","onClick","assignment","assigned","type","placeholder","value","onChange","e","target","updateDoc","assignTask","markAsDone","AddTaskForm","onTaskAdded","setAssignment","setCategory","onSubmit","preventDefault","docRef","addDoc","collection","required","Object","keys","cat","charAt","toUpperCase","slice","App","setLoading","useEffect","querySnapshot","getDocs","docs","data","fetchTasks","newTask","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","container","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.be725fce.chunk.js","sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getFirestore } from 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB7SZ20O6djh2NzZcDqBsi7MIWjpWrg-x4\",\n  authDomain: \"slutprojekt-scrum-board.firebaseapp.com\",\n  projectId: \"slutprojekt-scrum-board\",\n  storageBucket: \"slutprojekt-scrum-board.appspot.com\",\n  messagingSenderId: \"902046492840\",\n  appId: \"1:902046492840:web:84b3baa8bf8caf62e03a9d\",\n  measurementId: \"G-WQ42ZRXHKG\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nexport { db };\n","// src/components/TaskList.js\nimport React, { useState } from 'react';\nimport { db } from '../firebase';\nimport { updateDoc, deleteDoc, doc } from 'firebase/firestore';\n\nconst categoryClassNames = {\n  'ux': 'card-ux',\n  'dev frontend': 'card-dev-frontend',\n  'dev backend': 'card-dev-backend',\n  'design': 'card-design',\n  'testing': 'card-testing'\n};\n\nconst buttonClassNames = {\n  'ux': 'btn-ux',\n  'dev frontend': 'btn-dev-frontend',\n  'dev backend': 'btn-dev-backend',\n  'design': 'btn-design',\n  'testing': 'btn-testing'\n};\n\nconst TaskList = ({ tasks, setTasks, loading }) => {\n  const [assignee, setAssignee] = useState('');\n  const [error, setError] = useState(null);\n\n  const assignTask = async (id) => {\n    try {\n      const taskDoc = doc(db, 'assignments', id);\n      await updateDoc(taskDoc, { assigned: assignee, status: 'in progress' });\n      setTasks(prevTasks => prevTasks.map(task => \n        task.id === id ? { ...task, assigned: assignee, status: 'in progress' } : task\n      ));\n      setAssignee('');\n      setError(null);\n    } catch (error) {\n      setError(\"Error assigning task: \" + error.message);\n    }\n  };\n\n  const markAsDone = async (id) => {\n    try {\n      const taskDoc = doc(db, 'assignments', id);\n      await updateDoc(taskDoc, { status: 'done' });\n      setTasks(prevTasks => prevTasks.map(task => \n        task.id === id ? { ...task, status: 'done' } : task\n      ));\n      setError(null);\n    } catch (error) {\n      setError(\"Error marking task as done: \" + error.message);\n    }\n  };\n\n  const removeTask = async (id) => {\n    try {\n      if (window.confirm(\"Are you sure you want to remove this task?\")) {\n        const taskDoc = doc(db, 'assignments', id);\n        await deleteDoc(taskDoc);\n        setTasks(prevTasks => prevTasks.filter(task => task.id !== id));\n        setError(null);\n      }\n    } catch (error) {\n      setError(\"Error removing task: \" + error.message);\n    }\n  };\n\n  const renderTasks = (status) => {\n    return tasks.filter(task => task.status === status).map(task => (\n      <div key={task.id} className={`card mb-3 ${categoryClassNames[task.category]}`}>\n        <div className=\"card-body\">\n          <button className=\"close btn-remove-task\" onClick={() => removeTask(task.id)}>Ã—</button>\n          <h5 className=\"card-title\">{task.assignment}</h5>\n          <p className=\"card-text\">Assigned to: {task.assigned}</p>\n          {status === 'to do' && (\n            <div>\n              <input\n                type=\"text\"\n                className=\"form-control mb-2\"\n                placeholder=\"Assign to\"\n                value={assignee}\n                onChange={(e) => setAssignee(e.target.value)}\n              />\n              <button className={`btn w-100 ${buttonClassNames[task.category]}`} onClick={() => assignTask(task.id)}>Assign</button>\n            </div>\n          )}\n          {status === 'in progress' && (\n            <button className={`btn w-100 btn-done`} onClick={() => markAsDone(task.id)}>Done</button>\n          )}\n          {status === 'done' && (\n            <button className={`btn w-100 btn-remove`} onClick={() => removeTask(task.id)}>Remove</button>\n          )}\n        </div>\n      </div>\n    ));\n  };\n\n  if (loading) {\n    return <p>Loading tasks...</p>;\n  }\n\n  return (\n    <div className=\"container\">\n      {error && <p className=\"text-danger mt-3\">{error}</p>}\n      <div className=\"row\">\n        <div className=\"col-md-4\">\n          <h2>To Do</h2>\n          {renderTasks('to do')}\n        </div>\n        <div className=\"col-md-4\">\n          <h2>In Progress</h2>\n          {renderTasks('in progress')}\n        </div>\n        <div className=\"col-md-4\">\n          <h2>Done</h2>\n          {renderTasks('done')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskList;\n","import React, { useState } from 'react';\nimport { db } from '../firebase';\nimport { collection, addDoc } from 'firebase/firestore';\n\nconst categoryClassNames = {\n  'ux': 'option-ux',\n  'dev frontend': 'option-dev-frontend',\n  'dev backend': 'option-dev-backend',\n  'design': 'option-design',\n  'testing': 'option-testing'\n};\n\nconst AddTaskForm = ({ onTaskAdded }) => {\n  const [assignment, setAssignment] = useState('');\n  const [category, setCategory] = useState('');\n  const [error, setError] = useState(null);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const docRef = await addDoc(collection(db, 'assignments'), {\n        assignment,\n        category,\n        status: 'to do',\n        assigned: 'none'\n      });\n      onTaskAdded({ id: docRef.id, assignment, category, status: 'to do', assigned: 'none' });\n      setAssignment('');\n      setCategory('');\n      setError(null);\n    } catch (error) {\n      setError(\"Error adding document: \" + error.message);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"mb-4\">\n      <div className=\"mb-3\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Assignment\"\n          value={assignment}\n          onChange={(e) => setAssignment(e.target.value)}\n          required\n        />\n      </div>\n      <div className=\"mb-3\">\n        <select\n          className=\"form-select\"\n          value={category}\n          onChange={(e) => setCategory(e.target.value)}\n          required\n        >\n          <option value=\"\" className=\"option-default\">Select Category</option>\n          {Object.keys(categoryClassNames).map(cat => (\n            <option key={cat} value={cat} className={categoryClassNames[cat]}>\n              {cat.charAt(0).toUpperCase() + cat.slice(1)}\n            </option>\n          ))}\n        </select>\n      </div>\n      <button type=\"submit\" className=\"btn btn-add-task w-100\">Add Task</button>\n      {error && <p className=\"text-danger mt-3\">{error}</p>}\n    </form>\n  );\n};\n\nexport default AddTaskForm;\n","import React, { useState, useEffect } from 'react';\nimport TaskList from './components/TaskList';\nimport AddTaskForm from './components/AddTaskForm';\nimport { db } from './firebase';\nimport { collection, getDocs } from 'firebase/firestore';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      const querySnapshot = await getDocs(collection(db, 'assignments'));\n      setTasks(querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));\n      setLoading(false);\n    };\n\n    fetchTasks();\n  }, []);\n\n  const handleTaskAdded = (newTask) => {\n    setTasks(prevTasks => [...prevTasks, newTask]);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"my-4\">Scrum Board</h1>\n      <AddTaskForm onTaskAdded={handleTaskAdded} />\n      <TaskList tasks={tasks} setTasks={setTasks} loading={loading} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport React from 'react';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { createRoot } from 'react-dom/client';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\nreportWebVitals();\n"],"sourceRoot":""}